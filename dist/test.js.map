{"version":3,"sources":["../src/test.js"],"names":["testContainer","document","getElementById","mockData","headers","data","tableSnapshot","test1","description","run","HTMLOutput","console","log","replace","test2","DOMNode","createRange","createContextualFragment","querySelectorAll","length","test3","tableRow3","textContent","tests","forEach","test","index","output","createTable","HTML","createElement","hasPassed","innerHTML","appendChild"],"mappings":"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","file":"test.js","sourcesContent":["const testContainer = document.getElementById('test-results');\nconst mockData = {\n    headers: [\n        \"\",\n        \"header 1\",\n        \"header 2\",\n        \"header 3\"\n    ],\n    data: [\n        {\n            \"\": \"Row 1 - Value 1\",\n            \"header 1\": \"Row 1 - Value 2\",\n            \"header 2\": \"Row 1 - Value 3\",\n            \"header 3\": \"Row 1 - Value 4\"\n        },\n        {\n            \"\": \"Row 2 - Value 1\",\n            \"header 1\": \"Row 2 - Value 2\",\n            \"header 2\": \"Row 2 - Value 3\",\n            \"header 3\": \"Row 2 - Value 4\"\n        },\n        {\n            \"\": \"Row 3 - Value 1\",\n            \"header 1\": \"Row 3 - Value 2\",\n            \"header 2\": \"\",\n            \"header 3\": \"Row 3 - Value 4\"\n        }\n    ]\n}\nconst tableSnapshot = `<div class=\"table-wrapper\">\n<table>\n    <thead>\n        <tr scope=\"col\"><th>Sex</th><th>Count</th></tr>\n    </thead>\n    <tbody>\n        <tr><td>Male</td><td>65</td></tr><tr><td>Female</td><td>100</td></tr>\n    </tbody>\n</table>\n</div>`\nconst test1 = {\n    mockData: {\n        headers: [\n            \"Sex\",\n            \"Count\"\n        ],\n        data: [\n            {\n                \"Sex\": \"Male\",\n                \"Count\": \"65\"\n            },\n            {\n                \"Sex\": \"Female\",\n                \"Count\": \"100\"\n            }\n        ]\n    },\n    description: \"Returned HTML string matches stored snapshot\",\n    run: HTMLOutput => {\n        console.log(HTMLOutput);\n        if (HTMLOutput.replace(/\\s/g, \"\") === tableSnapshot.replace(/\\s/g, \"\")) {\n            return true;\n        }\n\n        console.log(\"Expected string of table HTML to match: \\n\" + tableSnapshot + \"\\n Instead got: \\n\", HTMLOutput);\n        return false;\n    }\n}\nconst test2 = {\n    mockData,\n    description: \"Empty headers still render as table header\",\n    run: HTMLOutput => {\n        const DOMNode = document.createRange().createContextualFragment(HTMLOutput);\n        if (DOMNode.querySelectorAll('thead th').length === 4) {\n            return true;\n        }\n\n        console.log(\"Expected length of headers to be 4, instead got \", DOMNode.querySelectorAll('thead th').length);\n        return false;\n    }\n}\nconst test3 = {\n    mockData,\n    description: \"Empty cell renders as empty table cell\",\n    run: HTMLOutput => {\n        const DOMNode = document.createRange().createContextualFragment(HTMLOutput);\n        const tableRow3 = DOMNode.querySelectorAll('tbody tr')[2];\n        if (tableRow3.querySelectorAll('td')[2].textContent === \"\" && tableRow3.querySelectorAll('td')[1].textContent === \"Row 3 - Value 2\") {\n            return true;\n        }\n\n        console.log(\"Expected text on empty cell to be empty string, instead got '\" + tableRow3.querySelectorAll('td')[2].textContent + \"'\");\n        return false;\n    }\n}\nconst tests = [test1, test2, test3];\n\ntests.forEach((test, index) => {\n    const output = createTable(test.mockData);\n    const HTML = document.createElement('div');\n    const hasPassed = test.run(output); \n    HTML.innerHTML = (\n        `<h2>Test ${index+1} - ${hasPassed? \"passed\": \"failed\"}</h2>\n        <p>${test.description}</p>\n        <details>\n            <summary>HTML output</summary>\n            <pre>${output}</pre>\n        </details>\n        `\n    )\n    testContainer.appendChild(HTML);\n});"]}